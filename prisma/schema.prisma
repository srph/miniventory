// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Brand {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Item      Item[]
}

model Customer {
    id           String                     @id @default(cuid())
    name         String
    note         String?
    email        String?
    phone        String?
    thumbnailUrl String?
    type         String?
    createdAt    DateTime                   @default(now())
    updatedAt    DateTime                   @updatedAt
    transactions TransactionPurchaseOrder[]
}

model Item {
    id                            String                          @id @default(cuid())
    brandId                       String
    brand                         Brand                           @relation(fields: [brandId], references: [id])
    name                          String
    thumbnailUrl                  String?
    quantity                      Int
    // Price of the item from the factory when it was restocked
    factoryPrice                  Float
    // Price of the item we're planning to sell it at (used as base when a purchase order comes in)
    retailPrice                   Float
    createdAt                     DateTime                        @default(now())
    updatedAt                     DateTime                        @updatedAt
    transactionPurchaseOrderItems TransactionPurchaseOrderItems[]
    transactionRestockOrderItems  TransactionRestockOrderItems[]
}

model TransactionPurchaseOrder {
    id             String                          @id @default(cuid())
    code           String                          @unique
    note           String?
    // Total quantity of all items
    totalQuantity  Int
    // Total number of items (excluding their quantity)
    totalItems     Int
    // Sum of all items' retail price
    totalSales     Float
    // Sum of all items' stock price (order.item.item.original_price) - original selling price (order.item.original_price)
    expectedProfit Float
    // Sum of all items' stock price (order.item.item.original_price) - input selling price (order.item.retail_price)
    totalProfit    Int
    createdAt      DateTime                        @default(now())
    updatedAt      DateTime                        @updatedAt
    customerId     String
    customer       Customer?                       @relation(fields: [customerId], references: [id])
    items          TransactionPurchaseOrderItems[]
    transaction    Transaction[]
}

model TransactionPurchaseOrderItems {
    id                         String                   @id @default(cuid())
    transactionPurchaseOrderId String
    transactionPurchaseOrder   TransactionPurchaseOrder @relation(fields: [transactionPurchaseOrderId], references: [id])
    itemId                     String
    item                       Item                     @relation(fields: [itemId], references: [id])
    // Factory price of item at time of transaction
    factoryPrice               Float
    // Intended price of the item at time of transaction
    retailPrice                Float
    // Actual price of the item at time of transaction
    transactionPrice           Float
    quantity                   Int
    createdAt                  DateTime                 @default(now())
    updatedAt                  DateTime                 @updatedAt
}

model TransactionRestockOrder {
    id             String                         @id @default(cuid())
    code           String                         @unique
    note           String?
    // Total quantity of all items
    totalQuantity  Int
    // Total number of items (excluding their quantity)
    totalItems     Int
    // Sum of all items' retail price
    totalSales     Float
    // Per item, we get retail price - factory price
    expectedProfit Float
    // Per item, we get transaction price - factory price
    totalProfit    Int
    createdAt      DateTime                       @default(now())
    updatedAt      DateTime                       @updatedAt
    items          TransactionRestockOrderItems[]
    transaction    Transaction[]
}

model TransactionRestockOrderItems {
    id                        String                  @id @default(cuid())
    transactionRestockOrderId String
    transactionRestockOrder   TransactionRestockOrder @relation(fields: [transactionRestockOrderId], references: [id])
    itemId                    String
    item                      Item                    @relation(fields: [itemId], references: [id])
    // Factory price of item at time of transaction
    factoryPrice              Float
    // Intended price of the item at time of transaction
    retailPrice               Float
    // Actual price of the item at time of transaction
    transactionPrice          Float
    quantity                  Int
    createdAt                 DateTime                @default(now())
    updatedAt                 DateTime                @updatedAt
}

model Transaction {
    id              String                    @id @default(cuid())
    type            String
    restockOrderId  String?
    restockOrder    TransactionRestockOrder?  @relation(fields: [restockOrderId], references: [id])
    purchaseOrderId String?
    purchaseOrder   TransactionPurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
