// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Category {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Item      Item[]
}

model Customer {
    id            String        @id @default(cuid())
    name          String
    note          String?
    email         String?
    phone         String?
    thumbnail_url String?
    isActive      Boolean       @default(true)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    Transaction   Transaction[]
}

model Item {
    id                            String                          @id @default(cuid())
    categoryId                    String
    category                      Category                        @relation(fields: [categoryId], references: [id])
    name                          String
    thumbnailUrl                  String?
    quantity                      Int
    originalPrice                 Float
    retailPrice                   Float
    createdAt                     DateTime                        @default(now())
    updatedAt                     DateTime                        @updatedAt
    TransactionPurchaseOrderItems TransactionPurchaseOrderItems[]
    TransactionRestockOrderItems  TransactionRestockOrderItems[]
}

model TransactionPurchaseOrder {
    id                            String                          @id @default(cuid())
    code                          String                          @unique
    note                          String?
    totalQuantity                 Int
    totalItems                    Int
    totalSales                    Int
    expectedProfit                Float
    totalProfit                   Int
    createdAt                     DateTime                        @default(now())
    updatedAt                     DateTime                        @updatedAt
    TransactionPurchaseOrderItems TransactionPurchaseOrderItems[]
    Transaction                   Transaction[]
}

model TransactionPurchaseOrderItems {
    id                         String                   @id @default(cuid())
    transactionPurchaseOrderId String
    transactionPurchaseOrder   TransactionPurchaseOrder @relation(fields: [transactionPurchaseOrderId], references: [id])
    itemId                     String
    item                       Item                     @relation(fields: [itemId], references: [id])
    originalPrice              Float
    retailPrice                Float
    quantity                   Int
    createdAt                  DateTime                 @default(now())
    updatedAt                  DateTime                 @updatedAt
}

model TransactionRestockOrder {
    id                           String                         @id @default(cuid())
    code                         String                         @unique
    note                         String?
    totalQuantity                Int
    totalItems                   Int
    totalSales                   Int
    expectedProfit               Float
    totalProfit                  Int
    createdAt                    DateTime                       @default(now())
    updatedAt                    DateTime                       @updatedAt
    TransactionRestockOrderItems TransactionRestockOrderItems[]
    Transaction                  Transaction[]
}

model TransactionRestockOrderItems {
    id                        String                  @id @default(cuid())
    transactionRestockOrderId String
    transactionRestockOrder   TransactionRestockOrder @relation(fields: [transactionRestockOrderId], references: [id])
    itemId                    String
    item                      Item                    @relation(fields: [itemId], references: [id])
    originalPrice             Float
    retailPrice               Float
    quantity                  Int
    createdAt                 DateTime                @default(now())
    updatedAt                 DateTime                @updatedAt
}

model Transaction {
    id              String                    @id @default(cuid())
    type            String
    restockOrderId  String?
    restockOrder    TransactionRestockOrder?  @relation(fields: [restockOrderId], references: [id])
    purchaseOrderId String?
    purchaseOrder   TransactionPurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
    customerId      String
    customer        Customer                  @relation(fields: [customerId], references: [id])
    total           Float
    payment         Float
    note            String?
    createdAt       DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
