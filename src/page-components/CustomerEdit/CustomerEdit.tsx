import React from "react";
import Head from "next/head";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm, FormProvider, Controller } from "react-hook-form";
import { useRouter } from "next/router";
import {
  TextInput,
  Button,
  FormSection,
  FormSectionSpacer,
  FormDivider,
  FormActions,
} from "~/ui-components";
import { config } from "~/config";
import { api } from "~/utils/api";
import { ThumbnailUploader } from "~/shared-components/ThumbnailUploader";

const schema = z.object({
  name: z.string().min(1),
  email: z.string().email().optional().or(z.literal("")),
  note: z.string().optional(),
  phone: z.string().optional(),
  thumbnailUrl: z.string().optional(),
});

type FormState = z.infer<typeof schema>;

const CustomerEdit = () => {
  const form = useForm<FormState>({
    resolver: zodResolver(schema),
  });

  const { query } = useRouter();

  const handleQuerySuccess = (query) => {
    form.reset({
      name: query.customer.name,
      email: query.customer.email ?? "",
      note: query.customer.note ?? "",
      phone: query.customer.phone ?? "",
      thumbnailUrl: query.customer.thumbnailUrl ?? "",
    });
  };

  const { data: customerQuery } = api.brands.getById.useQuery(
    { id: String(query.id) },
    { enabled: Boolean(query.id), onSuccess: handleQuerySuccess }
  );

  const { push } = useRouter();

  const handleSuccess = () => {
    push("/customers");
  };

  const {
    mutate: updateCustomerMutation,
    isLoading: isUpdateCustomerMutationLoading,
  } = api.brands.update.useMutation({ onSuccess: handleSuccess });

  const onSubmit = form.handleSubmit((values) => {
    console.log(values);

    updateCustomerMutation({
      ...values,
      id: String(query.id),
    });
  });

  return (
    <>
      <Head>
        <title>
          {config.app.title} - Edit Customer
          {customerQuery && ` - ${customerQuery.customer.name}`}
        </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="mx-auto w-[888px] px-2">
        <h2 className="text-2xl">Create New Customer</h2>

        <div className="mb-16"></div>

        <FormProvider {...form}>
          <form onSubmit={onSubmit}>
            <FormSection
              title="General Information"
              description="This information will be displayed publicly so be careful what you share."
            >
              <Controller
                name="name"
                control={form.control}
                render={({ field, fieldState }) => {
                  return (
                    <TextInput
                      {...field}
                      error={fieldState.error?.message}
                      label="Name"
                      placeholder="John Doe"
                    />
                  );
                }}
              />

              <FormSectionSpacer />

              <Controller
                name="note"
                control={form.control}
                render={({ field, fieldState }) => {
                  return (
                    <TextInput
                      {...field}
                      error={fieldState.error?.message}
                      label="Note"
                      placeholder="Reseller"
                    />
                  );
                }}
              />

              <FormSectionSpacer />
            </FormSection>

            <FormDivider />

            <FormSection
              title="Customer Photo"
              description="This will be served as a visual identifier for the customer. (Optional)"
            >
              <Controller
                name="thumbnailUrl"
                control={form.control}
                render={({ field }) => {
                  return (
                    <ThumbnailUploader
                      endpoint="customers"
                      file={field.value}
                      onUpload={field.onChange}
                    />
                  );
                }}
              />
            </FormSection>

            <FormDivider />

            <FormSection
              title="Contact"
              description="Different ways to contact this customer."
            >
              <Controller
                name="email"
                control={form.control}
                render={({ field, fieldState }) => {
                  return (
                    <TextInput
                      {...field}
                      error={fieldState.error?.message}
                      label="Email"
                      placeholder="your@email.com"
                    />
                  );
                }}
              />

              <FormSectionSpacer />

              <Controller
                name="phone"
                control={form.control}
                render={({ field }) => {
                  return (
                    <TextInput
                      {...field}
                      label="Phone No."
                      placeholder="0915 582 4555"
                    />
                  );
                }}
              />
            </FormSection>

            <FormActions>
              <Button
                type="submit"
                variant="primary"
                disabled={isUpdateCustomerMutationLoading}
              >
                Update Customer
              </Button>
            </FormActions>
          </form>
        </FormProvider>
      </div>
    </>
  );
};

export { CustomerEdit };
