import React, { useState, useMemo } from "react";
import BigNumber from "bignumber.js";
import { type NextPage } from "next";
import { useRouter } from "next/router";
import Head from "next/head";
import { IoClose } from "react-icons/io5";
import { config } from "~/config";
import {
  Autocomplete,
  AutocompleteOption,
  Button,
  TextInput,
} from "~/components";
import { AppLayout } from "~/page-components/AppLayout";
import { api } from "~/utils/api";
import { getAuthenticatedServerSideProps } from "~/server/auth";
import {
  useForm,
  useFieldArray,
  FormProvider,
  Controller,
} from "react-hook-form";

const InventoryRestock: NextPage = () => {
  const { push } = useRouter();

  const [itemsFilter, setItemsFilter] = useState("");

  const {
    data: itemsQuery,
    isLoading: isItemsQueryLoading,
    error: itemsQueryError,
  } = api.inventory.getAll.useQuery({
    search: itemsFilter,
  });

  const handleSuccess = () => {
    push("/");
  };

  const { mutate: createRestockOrder, isLoading: isCreateRestockOrderLoading } =
    api.transactions.createRestockOrder.useMutation({
      onSuccess: handleSuccess,
    });

  interface TransactionItem {
    quantity: string;
    factoryPrice: number;
    retailPrice: number;
    item: Item;
  }

  type Item = NonNullable<typeof itemsQuery>["items"][number];

  interface FormState {
    note: string;
    shippingFee: string;
    items: TransactionItem[];
  }

  const form = useForm<FormState>({
    defaultValues: {
      note: "",
      shippingFee: "",
      items: [],
    },
  });

  const { register, handleSubmit, watch } = form;

  const fields = useFieldArray({
    control: form.control,
    name: "items",
  });

  const [transactionItems] = watch(["items"]);

  const options: AutocompleteOption<Item>[] = useMemo(() => {
    return (itemsQuery?.items ?? []).map((item) => {
      return { label: item.name, value: item.id, meta: item };
    });
  }, [itemsQuery]);

  const selected = useMemo(() => {
    return transactionItems.map((t) => t.item.id);
  }, [transactionItems]);

  const handlePrependItem = (_: string, option: Item) => {
    fields.prepend({
      quantity: "1",
      factoryPrice: option.factoryPrice,
      retailPrice: option.retailPrice,
      item: option,
    });
  };

  const onSubmit = handleSubmit((values) => {
    createRestockOrder({
      note: values.note,
      shippingFee: Number(values.shippingFee),
      items: values.items.map((t) => ({
        itemId: t.item.id,
        factoryPrice: Number(t.factoryPrice),
        retailPrice: Number(t.retailPrice),
        quantity: Number(t.quantity),
      })),
    });
  });

  const totalQuantity = useMemo(() => {
    return transactionItems.reduce((total, t) => {
      return new BigNumber(total).plus(t.quantity).toNumber();
    }, 0);
  }, [fields, transactionItems]);

  const totalPriceIncrease = useMemo(() => {
    return transactionItems.reduce((total, t) => {
      return new BigNumber(t.retailPrice)
        .minus(t.item.retailPrice)
        .plus(total)
        .toNumber();
    }, 0);
  }, [fields, transactionItems]);

  const totalExpectedProfit = useMemo(() => {
    return transactionItems.reduce((total, t) => {
      return new BigNumber(t.retailPrice)
        .minus(t.factoryPrice)
        .multipliedBy(t.quantity)
        .plus(total)
        .toNumber();
    }, 0);
  }, [fields, transactionItems]);

  const totalExpenses = useMemo(() => {
    return transactionItems.reduce((total, t) => {
      return new BigNumber(t.item.factoryPrice)
        .multipliedBy(t.quantity)
        .plus(total)
        .toNumber();
    }, 0);
  }, [fields, transactionItems]);

  return (
    <>
      <Head>
        <title>{config.app.title} - Orders</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppLayout>
        <FormProvider {...form}>
          <form onSubmit={onSubmit}>
            <div className="mx-auto w-[1280px] px-2">
              <div className="flex gap-12">
                <div className="w-full">
                  <div className="flex items-center justify-between">
                    <h2 className="text-2xl">Restock Inventory</h2>

                    <div>
                      <Autocomplete<Item>
                        options={options}
                        selected={selected}
                        option={({ meta: item }) => (
                          <div className="flex items-center gap-2 rounded px-2 py-2 group-aria-selected:bg-neutral-500">
                            {item.thumbnailUrl ? (
                              <img
                                src={item.thumbnailUrl}
                                className="h-[24px] w-[24px] rounded-full"
                              />
                            ) : (
                              <div className="h-[24px] w-[24px] rounded-full bg-neutral-500 group-aria-selected:bg-neutral-400" />
                            )}

                            <div className="flex w-full items-center justify-between gap-2">
                              <span className="w-full truncate text-neutral-300 group-aria-selected:text-white">
                                {item.name}
                              </span>
                              <span className="shrink-0 text-neutral-500 group-aria-selected:text-neutral-300">
                                ({item.quantity} pcs)
                              </span>
                            </div>
                          </div>
                        )}
                        width={400}
                        closeOnSelect={false}
                        isLoading={isItemsQueryLoading}
                        error={itemsQueryError}
                        onInput={setItemsFilter}
                        onSelect={handlePrependItem}
                      >
                        <Button type="button">Select Items</Button>
                      </Autocomplete>
                    </div>
                  </div>

                  <div className="mb-8"></div>

                  <div>
                    {fields.fields.map((f, i) => {
                      const t = transactionItems[i];

                      if (t == null) {
                        throw new Error("Transaction item not found.");
                      }

                      return (
                        <div
                          className="border-b-none flex items-center border-t border-l border-r border-neutral-700 bg-neutral-800 px-4 py-4 first:rounded-tl first:rounded-tr last:rounded-br last:rounded-bl last:border-b"
                          key={f.id}
                        >
                          <div className="flex w-[280px] shrink-0 items-center gap-4">
                            {t.item.thumbnailUrl ? (
                              <img
                                src={t.item.thumbnailUrl}
                                className="h-[64px] w-[64px] rounded bg-neutral-500"
                              />
                            ) : (
                              <div className="h-[64px] w-[64px] rounded bg-neutral-500"></div>
                            )}
                            <div>
                              <h4 className="font-medium">{t.item.name}</h4>
                              <div className="mb-2"></div>
                              <span className="flex items-center gap-2 text-neutral-400">
                                <span>{t.item.quantity} pcs</span>
                                <span className="text-xs">â€¢</span>
                                <span>
                                  {new BigNumber(t.item.retailPrice).toFormat(
                                    2
                                  )}
                                </span>
                              </span>
                            </div>
                          </div>

                          <div className="w-[140px] shrink-0">
                            <h4 className="font-medium text-neutral-400">
                              Quantity
                            </h4>
                            <div className="mb-2"></div>

                            <Controller
                              name={`items.${i}.quantity`}
                              control={form.control}
                              render={({ field }) => {
                                return (
                                  <input
                                    type="text"
                                    placeholder="1"
                                    className="block h-[14px] w-full border-none bg-transparent leading-none text-white focus:outline-0"
                                    {...field}
                                  />
                                );
                              }}
                            />
                          </div>

                          <div className="w-[160px] shrink-0">
                            <h4 className="font-medium text-neutral-400">
                              Factory Price
                            </h4>

                            <div className="mb-2"></div>
                            <Controller
                              name={`items.${i}.factoryPrice`}
                              control={form.control}
                              render={({ field }) => {
                                return (
                                  <input
                                    type="text"
                                    placeholder={new BigNumber(
                                      f.factoryPrice
                                    ).toFormat(2)}
                                    className="block h-[14px] w-full border-none bg-transparent leading-none text-white focus:outline-0"
                                    {...field}
                                  />
                                );
                              }}
                            />
                          </div>

                          <div className="w-[160px] shrink-0">
                            <h4 className="font-medium text-neutral-400">
                              Retail Price
                            </h4>

                            <div className="mb-2"></div>
                            <Controller
                              name={`items.${i}.retailPrice`}
                              control={form.control}
                              render={({ field }) => {
                                return (
                                  <input
                                    type="text"
                                    placeholder={new BigNumber(
                                      f.retailPrice
                                    ).toFormat(2)}
                                    className="block h-[14px] w-full border-none bg-transparent leading-none text-white focus:outline-0"
                                    {...field}
                                  />
                                );
                              }}
                            />
                          </div>

                          <div className="flex w-full justify-end">
                            <button
                              type="button"
                              className="flex h-[24px] w-[24px] items-center justify-center rounded-full bg-neutral-500"
                              onClick={() => fields.remove(i)}
                            >
                              <IoClose />
                            </button>
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>

                <div className="w-[360px] shrink-0">
                  <div className="flex h-[40px] items-center">
                    <h2 className="transform text-2xl">Summary</h2>
                  </div>

                  <div className="mb-8"></div>

                  <div className="rounded border border-neutral-700 bg-neutral-800 px-4 py-4">
                    <Controller
                      name="note"
                      control={form.control}
                      render={({ field }) => {
                        return (
                          <TextInput
                            {...field}
                            label="Note"
                            placeholder="Enter a note for this restock"
                          />
                        );
                      }}
                    />

                    <div className="mb-6"></div>

                    <Controller
                      name="shippingFee"
                      control={form.control}
                      render={({ field }) => {
                        return (
                          <TextInput
                            {...field}
                            label="Shipping Fee"
                            placeholder="200.00"
                          />
                        );
                      }}
                    />

                    <div className="mb-10"></div>

                    <div className="space-y-5">
                      <div className="flex items-center justify-between">
                        <label className="font-medium text-neutral-400">
                          Total Quantity
                        </label>

                        <div>{new BigNumber(totalQuantity).toFormat()}</div>
                      </div>

                      <div className="flex items-center justify-between">
                        <label className="font-medium text-neutral-400">
                          Price Increase
                        </label>

                        <div>
                          {new BigNumber(totalPriceIncrease).toFormat(2)}
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <label className="font-medium text-neutral-400">
                          Total Profit
                        </label>

                        <div>
                          {new BigNumber(totalExpectedProfit).toFormat(2)}
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <label className="font-medium text-neutral-400">
                          Total Expenses
                        </label>

                        <div>{new BigNumber(totalExpenses).toFormat(2)}</div>
                      </div>
                    </div>

                    <div className="mb-10"></div>

                    <Button
                      full
                      type="submit"
                      variant="primary"
                      disabled={isCreateRestockOrderLoading}
                    >
                      Restock
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </FormProvider>
      </AppLayout>
    </>
  );
};

export {
  getAuthenticatedServerSideProps as getServerSideProps,
  InventoryRestock as default,
};
